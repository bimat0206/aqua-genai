---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Prepare resources for Aqua GenAI project'

Parameters:
  Prefix:
    Type: String
    Description: 'A unique prefix used to name all resources, helping to prevent naming conflicts and organize resources within your AWS account (e.g., aqua-genai).'
  Stage:
    Type: String
    Description: 'The deployment stage name for the API Gateway (e.g., dev, test, prod).'
  ModelRegion:
    Type: String
    Description: 'The AWS region where the Bedrock foundation model is hosted (e.g., us-east-1).'
  ModelId:
    Type: String
    Description: 'The specific identifier for the Bedrock foundation model (e.g., anthropic.claude-3-sonnet-20240229-v1:0).'
  ModelMaxTokens:
    Type: Number
    Description: 'The maximum number of tokens to generate in the Bedrock response.'
    MinValue: 1
  ModelTemperature:
    Type: Number
    Description: 'The sampling temperature to use for the Bedrock model. Higher values mean more creative outputs.'
    MinValue: 0.0
    MaxValue: 1.0
  FunctionMemorySize:
    Type: Number
    Description: 'The amount of memory that the Lambda function has available, in MB.'
    Default: 1024
  FunctionTimeout:
    Type: Number
    Description: 'The maximum amount of time (in seconds) that the Lambda function can run before it is terminated.'
    Default: 30
  MaxReferenceLabelImages:
    Type: Number
    Description: 'The maximum amount of reference label images that the Lambda function use for model.'
    Default: 2
  MaxReferenceOverviewImages:
    Type: Number
    Description: 'The maximum amount of reference overview images that the Lambda function use for model.'
    Default: 2
  FunctionLogLevel:
    Type: String
    Description: 'The logging level for monitoring the Lambda function.'
    Default: 'INFO'
  ApiRateLimit:
    Type: Number
    Description: 'The steady-state rate limit (average requests per second) for the API Gateway usage plan. Requests exceeding this rate are throttled.'
    Default: 10
    MinValue: 1
  ApiBurstLimit:
    Type: Number
    Description: 'The maximum burst of requests that API Gateway will allow for the usage plan. This defines how many requests can exceed the rate limit temporarily.'
    Default: 5
    MinValue: 1
  ApiQuotaLimit:
    Type: Number
    Description: 'The maximum number of requests that can be made in the specified quota period for the API Gateway usage plan.'
    Default: 1000
    MinValue: 1
  ApiQuotaPeriod:
    Type: String
    Description: 'The period over which the API Gateway usage plan quota applies (DAY, WEEK, or MONTH).'
    Default: 'MONTH'
    AllowedValues:
      - DAY
      - WEEK
      - MONTH
    ConstraintDescription: 'Must be DAY, WEEK, or MONTH.'

Resources:
  # Table
  ValidationResultTable:
    Type: AWS::DynamoDB::Table
    Description: 'DynamoDB table to store the validation results from the GenAI inference.'
    Properties:
      TableName: !Sub "${Prefix}-validate-result-{{ RandomSuffix }}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Description: 'IAM role assumed by the Lambda function. This role grants the necessary permissions for the Lambda function to execute, log to CloudWatch, access the S3 bucket, interact with Bedrock, and write to DynamoDB.'
    Properties:
      RoleName: !Sub '${Prefix}-validate-function-execution-role-{{ RandomSuffix }}'
      Description: 'IAM role assumed by the Lambda function. This role grants the necessary permissions for the Lambda function to execute, log to CloudWatch, access the S3 bucket, interact with Bedrock, and write to DynamoDB.'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !GetAtt DataSetBucket.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "${DataSetBucket.Arn}/*"
        - PolicyName: BedrockAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub "arn:aws:bedrock:${ModelRegion}::foundation-model/${ModelId}"
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !Sub "${ValidationResultTable.Arn}"
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                Resource:
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/binh-spring-app"
                  - "*"

  # S3 bucket storing data (images)
  DataSetBucket:
    Type: AWS::S3::Bucket
    Description: 'S3 bucket designated for storing input images that will be processed by the GenAI Lambda function.'
    Properties:
      BucketName: !Sub '${Prefix}-dataset-${AWS::AccountId}-${AWS::Region}-{{ RandomSuffix }}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ECR Repository for Lambda Container Image
  LambdaContainerRepo:
    Type: AWS::ECR::Repository
    Description: 'ECR repository for storing the Lambda function container image.'
    Properties:
      RepositoryName: !Sub '${Prefix}-lambda-container-{{ RandomSuffix }}'
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 30 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # Lambda Function
  GenAIFunction:
    Type: AWS::Lambda::Function
    Description: 'The core Lambda function invokes the Bedrock model for AI inference, and stores the results in DynamoDB.'
    Properties:
      FunctionName: !Sub '${Prefix}-validate-function-{{ RandomSuffix }}'
      Description: 'The core Lambda function invokes the Bedrock model for AI inference, and stores the results in DynamoDB.'
      PackageType: Image
      Code:
        ImageUri: !Sub '879654127886.dkr.ecr.ap-southeast-1.amazonaws.com/binh-spring-app:latest'
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: !Sub "${FunctionMemorySize}"
      Timeout: !Sub "${FunctionTimeout}"
      Environment:
        Variables:
          LOG_LEVEL: !Sub "${FunctionLogLevel}"
          AWS_DATASET_BUCKET: !Ref DataSetBucket
          AWS_IMPUT_IMG_VALIDATION_BUCKET: !Ref DataSetBucket
          AWS_RESULT_TABLE: !Ref ValidationResultTable
          AWS_MODEL_REGION: !Sub "${ModelRegion}"
          AWS_MODEL_ID: !Sub "${ModelId}"
          AWS_MODEL_MAX_TOKENS: !Sub "${ModelMaxTokens}"
          AWS_MODEL_TEMPERATURE: !Sub "${ModelTemperature}"
          MAX_REFERENCE_LABEL_IMAGES: !Sub "${MaxReferenceLabelImages}"
          MAX_REFERENCE_OVERVIEW_IMAGES: !Sub "${MaxReferenceOverviewImages}"
    DependsOn: LambdaExecutionRole

  ## API Gateway
  # The RESTful API endpoint
  APIEndpoint:
    Type: AWS::ApiGateway::RestApi
    Description: 'The main REST API Gateway endpoint for the Aqua GenAI project. It provides a public HTTP endpoint that triggers the Lambda function for image validation.'
    Properties:
      Name: !Sub '${Prefix}-api-{{ RandomSuffix }}'
      Description: !Sub 'REST API for the Aqua GenAI project in the ${Stage} environment.'

  # API Resource '/validate'
  ValidateResource:
    Type: AWS::ApiGateway::Resource
    Description: 'Defines the "/validate" path resource under the API Gateway. This is the specific endpoint clients will call to initiate image validation.'
    Properties:
      ParentId: !GetAtt APIEndpoint.RootResourceId
      PathPart: validate
      RestApiId: !Ref APIEndpoint

  # POST method for '/validate'
  ValidatePostMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP POST method for the "/validate" resource. This method is responsible for integrating with and invoking the GenAI Lambda function.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref ValidateResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenAIFunction.Arn}/invocations'

  # OPTIONS method for '/validate' (for CORS)
  ValidateOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP OPTIONS method for the "/validate" resource, enabling Cross-Origin Resource Sharing (CORS).'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref ValidateResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Resource '/catalog'
  CatalogResource:
    Type: AWS::ApiGateway::Resource
    Description: 'Defines the "/catalog" path resource for unified catalog operations.'
    Properties:
      ParentId: !GetAtt APIEndpoint.RootResourceId
      PathPart: catalog
      RestApiId: !Ref APIEndpoint

  # GET method for '/catalog'
  CatalogGetMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP GET method for the "/catalog" resource.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref CatalogResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenAIFunction.Arn}/invocations'

  # OPTIONS method for '/catalog' (for CORS)
  CatalogOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP OPTIONS method for the "/catalog" resource, enabling CORS.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref CatalogResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Resource '/transaction'
  TransactionResource:
    Type: AWS::ApiGateway::Resource
    Description: 'Defines the "/transaction" path resource for transaction operations.'
    Properties:
      ParentId: !GetAtt APIEndpoint.RootResourceId
      PathPart: transaction
      RestApiId: !Ref APIEndpoint

  # API Resource '/transaction/{transactionId}'
  TransactionIdResource:
    Type: AWS::ApiGateway::Resource
    Description: 'Defines the "/transaction/{transactionId}" path resource for specific transaction operations.'
    Properties:
      ParentId: !Ref TransactionResource
      PathPart: '{transactionId}'
      RestApiId: !Ref APIEndpoint

  # GET method for '/transaction/{transactionId}'
  TransactionIdGetMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP GET method for the "/transaction/{transactionId}" resource.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref TransactionIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenAIFunction.Arn}/invocations'

  # OPTIONS method for '/transaction/{transactionId}' (for CORS)
  TransactionIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP OPTIONS method for the "/transaction/{transactionId}" resource, enabling CORS.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref TransactionIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Resource '/transactions'
  TransactionsResource:
    Type: AWS::ApiGateway::Resource
    Description: 'Defines the "/transactions" path resource for transaction history operations.'
    Properties:
      ParentId: !GetAtt APIEndpoint.RootResourceId
      PathPart: transactions
      RestApiId: !Ref APIEndpoint

  # GET method for '/transactions'
  TransactionsGetMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP GET method for the "/transactions" resource.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref TransactionsResource
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GenAIFunction.Arn}/invocations'

  # OPTIONS method for '/transactions' (for CORS)
  TransactionsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Description: 'Configures the HTTP OPTIONS method for the "/transactions" resource, enabling CORS.'
    Properties:
      RestApiId: !Ref APIEndpoint
      ResourceId: !Ref TransactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    Description: 'Deploys the configured API Gateway resources (methods and paths).'
    Properties:
      RestApiId: !Ref APIEndpoint
      Description: !Sub 'Deployment for ${Stage} stage'
    DependsOn:
      - ValidatePostMethod
      - ValidateOptionsMethod
      - CatalogGetMethod
      - CatalogOptionsMethod
      - TransactionIdGetMethod
      - TransactionIdOptionsMethod
      - TransactionsGetMethod
      - TransactionsOptionsMethod

  # API Access Log
  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Description: 'CloudWatch Log Group for storing API Gateway access logs.'
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${Prefix}-access-logs'
      Description: 'CloudWatch Log Group for storing API Gateway access logs.'
      RetentionInDays: 14

  # API Gateway Stage
  APIStage:
    Type: AWS::ApiGateway::Stage
    Description: 'Defines a deployment stage for the API Gateway (e.g., "dev", "prod"). This allows for versioning and managing different environments of the API, enabling features like caching, throttling, and logging.'
    Properties:
      StageName: !Ref Stage
      RestApiId: !Ref APIEndpoint
      DeploymentId: !Ref APIDeployment
      Description: !Sub 'Stage for the ${Stage} environment'
      Variables:
        LambdaFunctionName: !Ref GenAIFunction
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: '/*'
          CachingEnabled: false
          ThrottlingBurstLimit: !Ref ApiBurstLimit
          ThrottlingRateLimit: !Ref ApiRateLimit
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt APIGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
    DependsOn: APIDeployment

  # API Key for access control
  APIKey:
    Type: AWS::ApiGateway::ApiKey
    Description: 'An API key used to control access to the API Gateway endpoint. Requests must include this key for successful invocation, providing a basic layer of security.'
    Properties:
      Name: !Sub '${Prefix}-key'
      Description: !Sub 'API Key for ${Stage} environment of Aqua GenAI API.'
      Enabled: true

  # Usage Plan
  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Description: 'Defines a usage plan for the API Gateway, controlling access rates (throttling) and overall request quotas for clients using the API key.'
    Properties:
      UsagePlanName: !Sub '${Prefix}-usage-plan-${Stage}'
      Description: !Sub 'Usage plan for Aqua GenAI API in the ${Stage} environment.'
      ApiStages:
        - ApiId: !Ref APIEndpoint
          Stage: !Ref APIStage
      Throttle:
        RateLimit: !Ref ApiRateLimit
        BurstLimit: !Ref ApiBurstLimit
      Quota:
        Limit: !Ref ApiQuotaLimit
        Period: !Ref ApiQuotaPeriod
    DependsOn: APIStage

  # Attach the API Key to the Usage Plan
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Description: 'Associates the defined API key with the usage plan. This links the API key to the throttling and quota limits set in the usage plan.'
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref APIUsagePlan
    DependsOn: APIUsagePlan

Outputs:
  ApiGatewayInvokeURL:
    Description: "The invoke URL for the API Gateway endpoint"
    Value: !Sub "https://${APIEndpoint}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/validate"
  DataSetBucketName:
    Description: "The name of the S3 bucket where input images and Lambda deployment packages are stored."
    Value: !Ref DataSetBucket
  DynamoDBTableName:
    Description: "The name of the DynamoDB table used to store the validation results."
    Value: !Ref ValidationResultTable
  ApiKey:
    Description: "The API Key for accessing the API Gateway endpoints"
    Value: !Ref APIKey
